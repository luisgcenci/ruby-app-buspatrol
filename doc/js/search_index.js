var search_data = {"index":{"searchIndex":["db","dbtest","helpers","object","points","pointstest","/points()","/points-within-polygon()","/points-within-radius/:radius()","check_geojson_class()","clear_table()","db_conn()","points_within_polygon()","points_within_radius_around_a_point()","save_geometry_to_db()","test_clear_table()","test_points_within_polygon()","test_points_within_radius_around_a_point()","test_save_geometry_to_db()","gemfile","gemfile.lock","readme.md","config.ru"],"longSearchIndex":["db","dbtest","helpers","object","points","pointstest","object#/points()","object#/points-within-polygon()","object#/points-within-radius/:radius()","helpers::check_geojson_class()","db::clear_table()","db::db_conn()","points::points_within_polygon()","points::points_within_radius_around_a_point()","db::save_geometry_to_db()","dbtest#test_clear_table()","pointstest#test_points_within_polygon()","pointstest#test_points_within_radius_around_a_point()","dbtest#test_save_geometry_to_db()","","","",""],"info":[["Db","","Db.html","",""],["DbTest","","DbTest.html","",""],["Helpers","","Helpers.html","",""],["Object","","Object.html","",""],["Points","","Points.html","",""],["PointsTest","","PointsTest.html","",""],["/points","Object","Object.html#method-i-2Fpoints","","<p>Saves an array of GeoJSON Point Objects or a Geometry Collection to the DB. <br> GeoJSON Objects should be …\n"],["/points-within-polygon","Object","Object.html#method-i-2Fpoints-2Dwithin-2Dpolygon","","<p>Receives a GeoJSON Polygon (no holes) <br> GeoJSON Polygon should be sent in the body <br> Responds with all …\n"],["/points-within-radius/:radius","Object","Object.html#method-i-2Fpoints-2Dwithin-2Dradius-2F-3Aradius","","<p>Receives a GeoJSON Point and a Radius <br> GeoJSON Point should be sent in the body <br> Radius should be sent …\n"],["check_geojson_class","Helpers","Helpers.html#method-c-check_geojson_class","(geojson)","<p>Checks if GeoJSON is an array or a Hash\n<p>@param <code>geojson</code> [Array or Hash] Array of GeoJSON Objects or a  …\n"],["clear_table","Db","Db.html#method-c-clear_table","(table_name)",""],["db_conn","Db","Db.html#method-c-db_conn","()",""],["points_within_polygon","Points","Points.html#method-c-points_within_polygon","(geojson_polygon)","<p>Gets All GeoJSON Points in the DB within a given Polygon\n<p>@param <code>geojson_polygon</code> [GeoJSON] a GeoJSON Polygon …\n"],["points_within_radius_around_a_point","Points","Points.html#method-c-points_within_radius_around_a_point","(geojson_point, radius)","<p>Gets All GeoJSON Points in the DB within a given radius around a given point\n<p>@param <code>geojson_point</code> [GeoJSON] …\n"],["save_geometry_to_db","Db","Db.html#method-c-save_geometry_to_db","(geometries)","<p>Saves GeoJSON Objects to the DB\n<p>@param <code>geometries</code> [Array] An Array of GeoJSON Objects\n"],["test_clear_table","DbTest","DbTest.html#method-i-test_clear_table","()",""],["test_points_within_polygon","PointsTest","PointsTest.html#method-i-test_points_within_polygon","()",""],["test_points_within_radius_around_a_point","PointsTest","PointsTest.html#method-i-test_points_within_radius_around_a_point","()",""],["test_save_geometry_to_db","DbTest","DbTest.html#method-i-test_save_geometry_to_db","()",""],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source &#39;rubygems.org&#39;\n<p>gem &#39;pg&#39; gem &#39;sinatra&#39; gem …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  multi_json (1.15.0)\n  mustermann (1.1.1)\n    ruby2_keywords ...</pre>\n"],["README.md","","README_md_txt.html","","<p>docker-compose up -d db\ndocker-compose run db bash\npsql --host=db --username=postgres --dbname=gps_collector ...\n"],["config.ru","","config_ru.html","","<p># frozen_string_literal: true\n<p>require &#39;./app&#39;\n<p>run Sinatra::Application\n"]]}}